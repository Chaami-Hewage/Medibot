
Bluetooth_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  000005f4  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800138  00800138  00000760  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117e  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dc  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f9  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000038c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 33       	cpi	r26, 0x38	; 56
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e3       	ldi	r26, 0x38	; 56
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 33       	cpi	r26, 0x3A	; 58
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  8a:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_init>:
}

float set_degree(int d)
{
	OCR1A =160+((22*d)/9);
}
  92:	82 e6       	ldi	r24, 0x62	; 98
  94:	80 b9       	out	0x00, r24	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	86 bf       	out	0x36, r24	; 54
  9a:	11 b8       	out	0x01, r1	; 1
  9c:	08 95       	ret

0000009e <i2c_start>:
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <i2c_start+0x4>
  a8:	08 95       	ret

000000aa <i2c_write>:
  aa:	83 b9       	out	0x03, r24	; 3
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <i2c_write+0x6>
  b6:	08 95       	ret

000000b8 <delay>:
  b8:	99 23       	and	r25, r25
  ba:	54 f4       	brge	.+20     	; 0xd0 <delay+0x18>
  bc:	08 95       	ret
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	31 09       	sbc	r19, r1
  c2:	e9 f7       	brne	.-6      	; 0xbe <delay+0x6>
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	84 17       	cp	r24, r20
  ca:	95 07       	cpc	r25, r21
  cc:	1c f4       	brge	.+6      	; 0xd4 <delay+0x1c>
  ce:	08 95       	ret
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	29 e7       	ldi	r18, 0x79	; 121
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <delay+0x6>

000000da <toggle>:
  da:	19 9a       	sbi	0x03, 1	; 3
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	86 bf       	out	0x36, r24	; 54
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <toggle+0x6>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <delay>
  ee:	19 98       	cbi	0x03, 1	; 3
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	86 bf       	out	0x36, r24	; 54
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <toggle+0x1a>
  fa:	08 95       	ret

000000fc <lcd_cmd_hf>:
  fc:	18 98       	cbi	0x03, 0	; 3
  fe:	94 e8       	ldi	r25, 0x84	; 132
 100:	96 bf       	out	0x36, r25	; 54
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <lcd_cmd_hf+0x6>
 108:	93 b1       	in	r25, 0x03	; 3
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	93 b9       	out	0x03, r25	; 3
 10e:	94 e8       	ldi	r25, 0x84	; 132
 110:	96 bf       	out	0x36, r25	; 54
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <lcd_cmd_hf+0x16>
 118:	93 b1       	in	r25, 0x03	; 3
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	89 2b       	or	r24, r25
 11e:	83 b9       	out	0x03, r24	; 3
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	86 bf       	out	0x36, r24	; 54
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <lcd_cmd_hf+0x28>
 12a:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 12e:	08 95       	ret

00000130 <lcd_cmd>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	18 98       	cbi	0x03, 0	; 3
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	86 bf       	out	0x36, r24	; 54
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <lcd_cmd+0xa>
 140:	83 b1       	in	r24, 0x03	; 3
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	83 b9       	out	0x03, r24	; 3
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	86 bf       	out	0x36, r24	; 54
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <lcd_cmd+0x1a>
 150:	83 b1       	in	r24, 0x03	; 3
 152:	9c 2f       	mov	r25, r28
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	89 2b       	or	r24, r25
 158:	83 b9       	out	0x03, r24	; 3
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	86 bf       	out	0x36, r24	; 54
 15e:	06 b6       	in	r0, 0x36	; 54
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <lcd_cmd+0x2e>
 164:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 168:	83 b1       	in	r24, 0x03	; 3
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	83 b9       	out	0x03, r24	; 3
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	86 bf       	out	0x36, r24	; 54
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <lcd_cmd+0x42>
 178:	23 b1       	in	r18, 0x03	; 3
 17a:	30 e1       	ldi	r19, 0x10	; 16
 17c:	c3 9f       	mul	r28, r19
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	83 b9       	out	0x03, r24	; 3
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	86 bf       	out	0x36, r24	; 54
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <lcd_cmd+0x5a>
 190:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_init>:
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd_hf>
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 1c8:	08 95       	ret

000001ca <lcd_dwr>:
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
 1ce:	18 9a       	sbi	0x03, 0	; 3
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	86 bf       	out	0x36, r24	; 54
 1d4:	06 b6       	in	r0, 0x36	; 54
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <lcd_dwr+0xa>
 1da:	83 b1       	in	r24, 0x03	; 3
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	83 b9       	out	0x03, r24	; 3
 1e0:	84 e8       	ldi	r24, 0x84	; 132
 1e2:	86 bf       	out	0x36, r24	; 54
 1e4:	06 b6       	in	r0, 0x36	; 54
 1e6:	07 fe       	sbrs	r0, 7
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <lcd_dwr+0x1a>
 1ea:	83 b1       	in	r24, 0x03	; 3
 1ec:	9c 2f       	mov	r25, r28
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	89 2b       	or	r24, r25
 1f2:	83 b9       	out	0x03, r24	; 3
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	86 bf       	out	0x36, r24	; 54
 1f8:	06 b6       	in	r0, 0x36	; 54
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <lcd_dwr+0x2e>
 1fe:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 202:	83 b1       	in	r24, 0x03	; 3
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	83 b9       	out	0x03, r24	; 3
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	86 bf       	out	0x36, r24	; 54
 20c:	06 b6       	in	r0, 0x36	; 54
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 212:	23 b1       	in	r18, 0x03	; 3
 214:	30 e1       	ldi	r19, 0x10	; 16
 216:	c3 9f       	mul	r28, r19
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	82 2b       	or	r24, r18
 21e:	83 b9       	out	0x03, r24	; 3
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	86 bf       	out	0x36, r24	; 54
 224:	06 b6       	in	r0, 0x36	; 54
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 22a:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <lcd_msg>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	88 81       	ld	r24, Y
 23a:	88 23       	and	r24, r24
 23c:	31 f0       	breq	.+12     	; 0x24a <lcd_msg+0x18>
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_dwr>
 244:	89 91       	ld	r24, Y+
 246:	81 11       	cpse	r24, r1
 248:	fb cf       	rjmp	.-10     	; 0x240 <lcd_msg+0xe>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <servo_init>:
 250:	8f b5       	in	r24, 0x2f	; 47
 252:	82 6a       	ori	r24, 0xA2	; 162
 254:	8f bd       	out	0x2f, r24	; 47
 256:	8e b5       	in	r24, 0x2e	; 46
 258:	8b 61       	ori	r24, 0x1B	; 27
 25a:	8e bd       	out	0x2e, r24	; 46
 25c:	87 e8       	ldi	r24, 0x87	; 135
 25e:	93 e1       	ldi	r25, 0x13	; 19
 260:	97 bd       	out	0x27, r25	; 39
 262:	86 bd       	out	0x26, r24	; 38
 264:	81 b3       	in	r24, 0x11	; 17
 266:	80 63       	ori	r24, 0x30	; 48
 268:	81 bb       	out	0x11, r24	; 17
 26a:	08 95       	ret

0000026c <__vector_8>:
#define  Trigger_pin	PA3	/* Trigger pin  */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
	TimerOverflow++;		/* Increment Timer Overflow count */
 27a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 27e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
 288:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
}
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <main>:

int main(void)
{
//---HC05---
	char Data_in;
	DDRD = 0xff;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	81 bb       	out	0x11, r24	; 17
    DDRB = 0xff;							/* make PORT as output port */
 29e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
 2a0:	84 bb       	out	0x14, r24	; 20
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
 2a2:	60 e8       	ldi	r22, 0x80	; 128
 2a4:	75 e2       	ldi	r23, 0x25	; 37
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 91 02 	call	0x522	; 0x522 <USART_Init>

//---LCD---
	i2c_init();
 2ae:	0e 94 49 00 	call	0x92	; 0x92 <i2c_init>
	i2c_start();
 2b2:	0e 94 4f 00 	call	0x9e	; 0x9e <i2c_start>
	i2c_write(0x70);
 2b6:	80 e7       	ldi	r24, 0x70	; 112
 2b8:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_write>
	lcd_init();
 2bc:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>

	lcd_cmd(0x80);
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
	lcd_msg("   Hey there!");
 2c6:	80 e6       	ldi	r24, 0x60	; 96
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	89 e6       	ldi	r24, 0x69	; 105
 2d2:	98 e1       	ldi	r25, 0x18	; 24
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x3a>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x44>
 2de:	00 00       	nop
	_delay_ms(1000);
	lcd_cmd(0x01); //clear
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
	
//---Servo---
	servo_init();	//Initializing
 2e6:	0e 94 28 01 	call	0x250	; 0x250 <servo_init>
	
	char string[10];
	long count;
	double distance;
	
	DDRA = 0b00001000;
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	8a bb       	out	0x1a, r24	; 26
	/* Make trigger pin as output */
	DDRD = 0b00000011;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 2f2:	12 ba       	out	0x12, r1	; 18
	
	DDRC = 0x01; //Makes RC0 output pin
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 2f8:	15 ba       	out	0x15, r1	; 21
	
	sei();					/* Enable global interrupt */
 2fa:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;				/* Set all bit to zero Normal operation */
 300:	1f bc       	out	0x2f, r1	; 47
			PORTC = 0b00000000;
		}
		else if(Data_in =='d')			//Right
		{
			USART_SendString("Right;  ");
			PORTC = 0b00010000;
 302:	68 94       	set
 304:	ee 24       	eor	r14, r14
 306:	e4 f8       	bld	r14, 4
			PORTC = 0b00000000;
		}
		else if(Data_in =='a')			//Left
		{
			USART_SendString("Left;  ");
			PORTC = 0b01000000;
 308:	68 94       	set
 30a:	ff 24       	eor	r15, r15
 30c:	f6 f8       	bld	r15, 6
			
		}
		else if(Data_in =='s')			//Backward
		{
			USART_SendString("Backward;  ");
			PORTC = 0b00101000;
 30e:	08 e2       	ldi	r16, 0x28	; 40
			lcd_cmd(0x01); //clear
		}
		else if(Data_in =='w')			//Forward
		{
			USART_SendString("Forward;  ");
			PORTC = 0b01010000;
 310:	10 e5       	ldi	r17, 0x50	; 80
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
		}
		else if(Data_in =='5')
		{
			PORTB = 0b00000100;
 312:	d4 e0       	ldi	r29, 0x04	; 4
			lcd_cmd(0x01); //clear
		}
		else if(Data_in =='3')
		{  
			PORTD = 0b10000000; //buzzer on
			PORTB = 0b00000010;
 314:	c2 e0       	ldi	r28, 0x02	; 2
	
	while(1)
	{
		
//---HC05---
		Data_in = USART_RxChar();						/* receive data from Bluetooth device*/
 316:	0e 94 bf 02 	call	0x57e	; 0x57e <USART_RxChar>
		if(Data_in =='1')
 31a:	81 33       	cpi	r24, 0x31	; 49
 31c:	d1 f4       	brne	.+52     	; 0x352 <main+0xb8>
		{	
			PORTB = 0b00000001;						/* Turn ON LED */
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	88 bb       	out	0x18, r24	; 24
			USART_SendString("LAMP_ON;  ");					/* send status of LED i.e. LED ON */
 322:	8e e6       	ldi	r24, 0x6E	; 110
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("LAMP_ON");
 330:	89 e7       	ldi	r24, 0x79	; 121
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	89 e6       	ldi	r24, 0x69	; 105
 33c:	98 e1       	ldi	r25, 0x18	; 24
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0xa4>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0xae>
 348:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 350:	e2 cf       	rjmp	.-60     	; 0x316 <main+0x7c>
			
		}
		else if(Data_in =='2')
 352:	82 33       	cpi	r24, 0x32	; 50
 354:	c9 f4       	brne	.+50     	; 0x388 <main+0xee>
		{	
			PORTB = 0b00000000;						/* Turn OFF LED */
 356:	18 ba       	out	0x18, r1	; 24
			USART_SendString("LAMP_OFF;  "); 				/* send status of LED i.e. LED OFF */
 358:	81 e8       	ldi	r24, 0x81	; 129
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("LAMP_OFF");
 366:	8d e8       	ldi	r24, 0x8D	; 141
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	89 e6       	ldi	r24, 0x69	; 105
 372:	98 e1       	ldi	r25, 0x18	; 24
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0xda>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0xe4>
 37e:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 386:	c7 cf       	rjmp	.-114    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='3')
 388:	83 33       	cpi	r24, 0x33	; 51
 38a:	29 f5       	brne	.+74     	; 0x3d6 <main+0x13c>
		{  
			PORTD = 0b10000000; //buzzer on
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b00000010;
 390:	c8 bb       	out	0x18, r28	; 24
			USART_SendString("Heater_ON;  ");
 392:	86 e9       	ldi	r24, 0x96	; 150
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("Heater_ON");
 3a0:	83 ea       	ldi	r24, 0xA3	; 163
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 3a8:	2f ef       	ldi	r18, 0xFF	; 255
 3aa:	89 e6       	ldi	r24, 0x69	; 105
 3ac:	98 e1       	ldi	r25, 0x18	; 24
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x114>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x11e>
 3b8:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			PORTB = 0b00000000; //buzzer off
 3c0:	18 ba       	out	0x18, r1	; 24
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	89 e6       	ldi	r24, 0x69	; 105
 3c6:	98 e1       	ldi	r25, 0x18	; 24
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x12e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x138>
 3d2:	00 00       	nop
 3d4:	a0 cf       	rjmp	.-192    	; 0x316 <main+0x7c>
			_delay_ms(1000);
		}
		else if(Data_in =='4')
 3d6:	84 33       	cpi	r24, 0x34	; 52
 3d8:	c9 f4       	brne	.+50     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
		{
			PORTB = 0b00000000;
 3da:	18 ba       	out	0x18, r1	; 24
			USART_SendString("Heater_OFF;  ");
 3dc:	8d ea       	ldi	r24, 0xAD	; 173
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("Heater_OFF");
 3ea:	8b eb       	ldi	r24, 0xBB	; 187
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	89 e6       	ldi	r24, 0x69	; 105
 3f6:	98 e1       	ldi	r25, 0x18	; 24
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x15e>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 402:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 40a:	85 cf       	rjmp	.-246    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='5')
 40c:	85 33       	cpi	r24, 0x35	; 53
 40e:	c9 f4       	brne	.+50     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
		{
			PORTB = 0b00000100;
 410:	d8 bb       	out	0x18, r29	; 24
			USART_SendString("MOTOR_ON;  ");
 412:	86 ec       	ldi	r24, 0xC6	; 198
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("MOTOR_ON");
 420:	82 ed       	ldi	r24, 0xD2	; 210
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	89 e6       	ldi	r24, 0x69	; 105
 42c:	98 e1       	ldi	r25, 0x18	; 24
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 440:	6a cf       	rjmp	.-300    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='6')
 442:	86 33       	cpi	r24, 0x36	; 54
 444:	c9 f4       	brne	.+50     	; 0x478 <__stack+0x19>
		{
			PORTB = 0b00000000;
 446:	18 ba       	out	0x18, r1	; 24
			USART_SendString("MOTOR_OFF;  ");
 448:	8b ed       	ldi	r24, 0xDB	; 219
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			lcd_cmd(0x80);
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
			lcd_msg("MOTOR_OFF");
 456:	88 ee       	ldi	r24, 0xE8	; 232
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_msg>
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	89 e6       	ldi	r24, 0x69	; 105
 462:	98 e1       	ldi	r25, 0x18	; 24
 464:	21 50       	subi	r18, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <__stack+0x5>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__stack+0xf>
 46e:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01); //clear
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 98 00 	call	0x130	; 0x130 <lcd_cmd>
 476:	4f cf       	rjmp	.-354    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='w')			//Forward
 478:	87 37       	cpi	r24, 0x77	; 119
 47a:	81 f4       	brne	.+32     	; 0x49c <__stack+0x3d>
		{
			USART_SendString("Forward;  ");
 47c:	82 ef       	ldi	r24, 0xF2	; 242
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			PORTC = 0b01010000;
 484:	15 bb       	out	0x15, r17	; 21
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	8d e3       	ldi	r24, 0x3D	; 61
 48a:	99 e4       	ldi	r25, 0x49	; 73
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__stack+0x2d>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__stack+0x37>
 496:	00 00       	nop
			_delay_ms(3000);
			PORTC = 0b00000000;
 498:	15 ba       	out	0x15, r1	; 21
 49a:	3d cf       	rjmp	.-390    	; 0x316 <main+0x7c>
			
		}
		else if(Data_in =='s')			//Backward
 49c:	83 37       	cpi	r24, 0x73	; 115
 49e:	81 f4       	brne	.+32     	; 0x4c0 <__stack+0x61>
		{
			USART_SendString("Backward;  ");
 4a0:	8d ef       	ldi	r24, 0xFD	; 253
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			PORTC = 0b00101000;
 4a8:	05 bb       	out	0x15, r16	; 21
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	8d e3       	ldi	r24, 0x3D	; 61
 4ae:	99 e4       	ldi	r25, 0x49	; 73
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__stack+0x51>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__stack+0x5b>
 4ba:	00 00       	nop
			_delay_ms(3000);
			PORTC = 0b00000000;
 4bc:	15 ba       	out	0x15, r1	; 21
 4be:	2b cf       	rjmp	.-426    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='a')			//Left
 4c0:	81 36       	cpi	r24, 0x61	; 97
 4c2:	81 f4       	brne	.+32     	; 0x4e4 <__stack+0x85>
		{
			USART_SendString("Left;  ");
 4c4:	89 e0       	ldi	r24, 0x09	; 9
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			PORTC = 0b01000000;
 4cc:	f5 ba       	out	0x15, r15	; 21
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	8e e9       	ldi	r24, 0x9E	; 158
 4d2:	94 e2       	ldi	r25, 0x24	; 36
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__stack+0x75>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__stack+0x7f>
 4de:	00 00       	nop
			_delay_ms(1500);
			PORTC = 0b00000000;
 4e0:	15 ba       	out	0x15, r1	; 21
 4e2:	19 cf       	rjmp	.-462    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='d')			//Right
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	81 f4       	brne	.+32     	; 0x508 <__stack+0xa9>
		{
			USART_SendString("Right;  ");
 4e8:	81 e1       	ldi	r24, 0x11	; 17
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			PORTC = 0b00010000;
 4f0:	e5 ba       	out	0x15, r14	; 21
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	8e e9       	ldi	r24, 0x9E	; 158
 4f6:	94 e2       	ldi	r25, 0x24	; 36
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__stack+0x99>
 500:	00 c0       	rjmp	.+0      	; 0x502 <__stack+0xa3>
 502:	00 00       	nop
			_delay_ms(1500);
			PORTC = 0b00000000;
 504:	15 ba       	out	0x15, r1	; 21
 506:	07 cf       	rjmp	.-498    	; 0x316 <main+0x7c>
		}
		else if(Data_in =='7')			//Stop
 508:	87 33       	cpi	r24, 0x37	; 55
 50a:	31 f4       	brne	.+12     	; 0x518 <__stack+0xb9>
		{
			USART_SendString("Stop;  ");
 50c:	8a e1       	ldi	r24, 0x1A	; 26
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
			PORTC = 0b00000000;
 514:	15 ba       	out	0x15, r1	; 21
 516:	ff ce       	rjmp	.-514    	; 0x316 <main+0x7c>
		}
		else
			USART_SendString("Select proper option");	/* send message for selecting proper option */
 518:	82 e2       	ldi	r24, 0x22	; 34
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_SendString>
 520:	fa ce       	rjmp	.-524    	; 0x316 <main+0x7c>

00000522 <USART_Init>:
 522:	2a b1       	in	r18, 0x0a	; 10
 524:	28 61       	ori	r18, 0x18	; 24
 526:	2a b9       	out	0x0a, r18	; 10
 528:	20 b5       	in	r18, 0x20	; 32
 52a:	26 68       	ori	r18, 0x86	; 134
 52c:	20 bd       	out	0x20, r18	; 32
 52e:	dc 01       	movw	r26, r24
 530:	cb 01       	movw	r24, r22
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	aa 1f       	adc	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	9c 01       	movw	r18, r24
 544:	ad 01       	movw	r20, r26
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	44 1f       	adc	r20, r20
 54c:	55 1f       	adc	r21, r21
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	44 1f       	adc	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	72 e1       	ldi	r23, 0x12	; 18
 55a:	8a e7       	ldi	r24, 0x7A	; 122
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodsi4>
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	82 0f       	add	r24, r18
 566:	89 b9       	out	0x09, r24	; 9
 568:	da 01       	movw	r26, r20
 56a:	c9 01       	movw	r24, r18
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	a1 09       	sbc	r26, r1
 570:	b1 09       	sbc	r27, r1
 572:	89 2f       	mov	r24, r25
 574:	9a 2f       	mov	r25, r26
 576:	ab 2f       	mov	r26, r27
 578:	bb 27       	eor	r27, r27
 57a:	80 bd       	out	0x20, r24	; 32
 57c:	08 95       	ret

0000057e <USART_RxChar>:
 57e:	5f 9b       	sbis	0x0b, 7	; 11
 580:	fe cf       	rjmp	.-4      	; 0x57e <USART_RxChar>
 582:	8c b1       	in	r24, 0x0c	; 12
 584:	08 95       	ret

00000586 <USART_TxChar>:
 586:	8c b9       	out	0x0c, r24	; 12
 588:	5d 9b       	sbis	0x0b, 5	; 11
 58a:	fe cf       	rjmp	.-4      	; 0x588 <USART_TxChar+0x2>
 58c:	08 95       	ret

0000058e <USART_SendString>:
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
 594:	88 81       	ld	r24, Y
 596:	88 23       	and	r24, r24
 598:	31 f0       	breq	.+12     	; 0x5a6 <USART_SendString+0x18>
 59a:	21 96       	adiw	r28, 0x01	; 1
 59c:	0e 94 c3 02 	call	0x586	; 0x586 <USART_TxChar>
 5a0:	89 91       	ld	r24, Y+
 5a2:	81 11       	cpse	r24, r1
 5a4:	fb cf       	rjmp	.-10     	; 0x59c <USART_SendString+0xe>
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <__udivmodsi4>:
 5ac:	a1 e2       	ldi	r26, 0x21	; 33
 5ae:	1a 2e       	mov	r1, r26
 5b0:	aa 1b       	sub	r26, r26
 5b2:	bb 1b       	sub	r27, r27
 5b4:	fd 01       	movw	r30, r26
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <__udivmodsi4_ep>

000005b8 <__udivmodsi4_loop>:
 5b8:	aa 1f       	adc	r26, r26
 5ba:	bb 1f       	adc	r27, r27
 5bc:	ee 1f       	adc	r30, r30
 5be:	ff 1f       	adc	r31, r31
 5c0:	a2 17       	cp	r26, r18
 5c2:	b3 07       	cpc	r27, r19
 5c4:	e4 07       	cpc	r30, r20
 5c6:	f5 07       	cpc	r31, r21
 5c8:	20 f0       	brcs	.+8      	; 0x5d2 <__udivmodsi4_ep>
 5ca:	a2 1b       	sub	r26, r18
 5cc:	b3 0b       	sbc	r27, r19
 5ce:	e4 0b       	sbc	r30, r20
 5d0:	f5 0b       	sbc	r31, r21

000005d2 <__udivmodsi4_ep>:
 5d2:	66 1f       	adc	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	1a 94       	dec	r1
 5dc:	69 f7       	brne	.-38     	; 0x5b8 <__udivmodsi4_loop>
 5de:	60 95       	com	r22
 5e0:	70 95       	com	r23
 5e2:	80 95       	com	r24
 5e4:	90 95       	com	r25
 5e6:	9b 01       	movw	r18, r22
 5e8:	ac 01       	movw	r20, r24
 5ea:	bd 01       	movw	r22, r26
 5ec:	cf 01       	movw	r24, r30
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
